/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    products: Product;
    tags: Tag;
    tenants: Tenant;
    orders: Order;
    reviews: Review;
    wallets: Wallet;
    payouts: Payout;
    'wallet-transactions': WalletTransaction;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    categories: {
      subcategories: 'categories';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    wallets: WalletsSelect<false> | WalletsSelect<true>;
    payouts: PayoutsSelect<false> | PayoutsSelect<true>;
    'wallet-transactions': WalletTransactionsSelect<false> | WalletTransactionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  username: string;
  phone?: string | null;
  roles?: ('super-admin' | 'user')[] | null;
  tenants?:
    | {
        tenant: string | Tenant;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  /**
   * This is the name of the store (e.g. Antonio's Store)
   */
  name: string;
  /**
   * This is the subdomain for the store (e.g. [slug].obazaar.com)
   */
  slug: string;
  image?: (string | null) | Media;
  /**
   * Confirmation that the business is legally registered
   */
  isBusinessRegistered: boolean;
  /**
   * Commercial Registration number (6-12 digits)
   */
  businessCRNumber: string;
  /**
   * Current approval status of the tenant
   */
  status: 'pending' | 'approved' | 'rejected' | 'suspended';
  /**
   * Admin verification of business registration (replaces Stripe verification)
   */
  businessVerified?: boolean | null;
  /**
   * Information needed to send payouts to this vendor
   */
  paymentInfo?: {
    /**
     * PayPal email address for receiving payouts
     */
    paypalEmail?: string | null;
    /**
     * Preferred method for receiving payouts
     */
    preferredPayoutMethod?: ('paypal' | 'bank_transfer' | 'manual') | null;
    /**
     * Bank account details for direct transfers
     */
    bankDetails?: {
      accountHolderName?: string | null;
      bankName?: string | null;
      accountNumber?: string | null;
      routingNumber?: string | null;
    };
    /**
     * Minimum amount required before payout can be requested
     */
    minimumPayoutAmount?: number | null;
  };
  /**
   * Optional: Stripe Account ID for payment processing
   */
  stripeAccountId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  tenant?: (string | null) | Tenant;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  name: string;
  slug: string;
  color?: string | null;
  parent?: (string | null) | Category;
  subcategories?: {
    docs?: (string | Category)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Your business must be approved and verified before creating products
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  tenant?: (string | null) | Tenant;
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Price in USD
   */
  price: number;
  /**
   * Number of items in stock
   */
  stock: number;
  /**
   * Enable inventory tracking for this product
   */
  trackInventory?: boolean | null;
  /**
   * Alert when stock falls below this number
   */
  lowStockThreshold?: number | null;
  /**
   * Allow customers to purchase when out of stock
   */
  allowBackorders?: boolean | null;
  category?: (string | null) | Category;
  tags?: (string | Tag)[] | null;
  /**
   * Tip: Upload images to Media collection first, then select them here to avoid form clearing
   */
  image?: (string | null) | Media;
  /**
   * Tip: Upload images to Media collection first, then select them here to avoid form clearing
   */
  cover?: (string | null) | Media;
  refundPolicy?: ('30-day' | '14-day' | '7-day' | '3-day' | '1-day' | 'no-refunds') | null;
  /**
   * Protected content only visible to customers after purchase. Add product documentation, downloadable files, getting started guides, and bonus materials. Supports Markdown formatting
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * If checked, this product will not be shown on the public storefront
   */
  isPrivate?: boolean | null;
  /**
   * If checked, this product will be archived
   */
  isArchived?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name: string;
  products?: (string | Product)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: string;
  name: string;
  shipping: {
    name: string;
    phone: string;
    stateId: number;
    wilayaId: number;
    areaId: number;
    address?: string | null;
  };
  /**
   * Special delivery instructions
   */
  deliveryNotes?: string | null;
  user: string | User;
  product: string | Product;
  /**
   * Number of items purchased
   */
  quantity: number;
  /**
   * Tenant/vendor who owns the product
   */
  tenant: string | Tenant;
  /**
   * PayPal Order ID
   */
  paypalOrderId?: string | null;
  /**
   * PayPal Capture ID (transaction ID)
   */
  paypalCaptureId?: string | null;
  paymentStatus: 'pending' | 'completed' | 'failed' | 'refunded';
  /**
   * Amount paid in USD
   */
  amountPaid?: number | null;
  /**
   * Platform commission amount in USD
   */
  platformCommission?: number | null;
  /**
   * Vendor earning after commission in USD
   */
  vendorEarning?: number | null;
  /**
   * Whether wallet transaction has been created for this order
   */
  walletTransactionProcessed?: boolean | null;
  shipment?: {
    /**
     * Nooloman shipment ID
     */
    shipment_id?: string | null;
    /**
     * Public tracking code
     */
    public_code?: string | null;
    /**
     * Integration code (our order ID)
     */
    integration_code?: string | null;
    /**
     * Nooloman status ID
     */
    status_id?: number | null;
    /**
     * Total shipping cost
     */
    total_cost?: number | null;
    /**
     * Last sync with Nooloman API
     */
    last_synced_at?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  description: string;
  rating: number;
  product: string | Product;
  user: string | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage vendor wallet balances and track earnings
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wallets".
 */
export interface Wallet {
  id: string;
  /**
   * The tenant/vendor this wallet belongs to
   */
  tenant: string | Tenant;
  /**
   * Balance available for withdrawal (USD)
   */
  availableBalance: number;
  /**
   * Balance pending from recent sales (holds for X days)
   */
  pendingBalance: number;
  /**
   * Total lifetime earnings
   */
  totalEarnings: number;
  /**
   * Total amount withdrawn to date
   */
  totalWithdrawn: number;
  /**
   * Platform commission rate (0.1 = 10%)
   */
  commissionRate: number;
  /**
   * Number of days to hold funds before making available
   */
  holdPeriodDays: number;
  /**
   * PayPal email for payouts (optional)
   */
  paypalEmail?: string | null;
  /**
   * Bank details for manual payouts
   */
  bankDetails?: {
    accountHolderName?: string | null;
    accountNumber?: string | null;
    bankName?: string | null;
    swiftCode?: string | null;
    iban?: string | null;
  };
  /**
   * Whether this wallet is active for earnings
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Process vendor payouts and track payment status
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payouts".
 */
export interface Payout {
  id: string;
  wallet: string | Wallet;
  /**
   * Payout amount in USD
   */
  amount: number;
  method: 'paypal' | 'bank_transfer' | 'manual';
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
  requestedAt: string;
  processedAt?: string | null;
  /**
   * PayPal payout batch ID
   */
  paypalPayoutId?: string | null;
  /**
   * PayPal payout item ID
   */
  paypalPayoutItemId?: string | null;
  /**
   * Email address for payout (PayPal)
   */
  recipientEmail?: string | null;
  /**
   * Bank details used for this payout
   */
  bankDetails?: {
    accountHolderName?: string | null;
    accountNumber?: string | null;
    bankName?: string | null;
    swiftCode?: string | null;
    iban?: string | null;
  };
  /**
   * Internal notes about this payout
   */
  notes?: string | null;
  /**
   * Reason for payout failure
   */
  failureReason?: string | null;
  /**
   * Processing fee charged for this payout
   */
  feeAmount?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wallet-transactions".
 */
export interface WalletTransaction {
  id: string;
  wallet: string | Wallet;
  type: 'earning' | 'payout' | 'refund' | 'commission_adjustment' | 'manual_adjustment' | 'hold_release';
  /**
   * Transaction amount in USD (positive for credits, negative for debits)
   */
  amount: number;
  /**
   * Original sale amount before commission (for earnings)
   */
  grossAmount?: number | null;
  /**
   * Platform commission deducted (for earnings)
   */
  commissionAmount?: number | null;
  description: string;
  status: 'pending' | 'completed' | 'failed' | 'cancelled';
  /**
   * Related order (for earnings/refunds)
   */
  relatedOrder?: (string | null) | Order;
  /**
   * Related payout record
   */
  relatedPayout?: (string | null) | Payout;
  /**
   * PayPal transaction ID for this transaction
   */
  paypalTransactionId?: string | null;
  /**
   * When this amount becomes available for withdrawal
   */
  availableAt?: string | null;
  /**
   * Additional transaction metadata
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null)
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'orders';
        value: string | Order;
      } | null)
    | ({
        relationTo: 'reviews';
        value: string | Review;
      } | null)
    | ({
        relationTo: 'wallets';
        value: string | Wallet;
      } | null)
    | ({
        relationTo: 'payouts';
        value: string | Payout;
      } | null)
    | ({
        relationTo: 'wallet-transactions';
        value: string | WalletTransaction;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  username?: T;
  phone?: T;
  roles?: T;
  tenants?:
    | T
    | {
        tenant?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  tenant?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  color?: T;
  parent?: T;
  subcategories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  description?: T;
  price?: T;
  stock?: T;
  trackInventory?: T;
  lowStockThreshold?: T;
  allowBackorders?: T;
  category?: T;
  tags?: T;
  image?: T;
  cover?: T;
  refundPolicy?: T;
  content?: T;
  isPrivate?: T;
  isArchived?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  products?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  image?: T;
  isBusinessRegistered?: T;
  businessCRNumber?: T;
  status?: T;
  businessVerified?: T;
  paymentInfo?:
    | T
    | {
        paypalEmail?: T;
        preferredPayoutMethod?: T;
        bankDetails?:
          | T
          | {
              accountHolderName?: T;
              bankName?: T;
              accountNumber?: T;
              routingNumber?: T;
            };
        minimumPayoutAmount?: T;
      };
  stripeAccountId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  name?: T;
  shipping?:
    | T
    | {
        name?: T;
        phone?: T;
        stateId?: T;
        wilayaId?: T;
        areaId?: T;
        address?: T;
      };
  deliveryNotes?: T;
  user?: T;
  product?: T;
  quantity?: T;
  tenant?: T;
  paypalOrderId?: T;
  paypalCaptureId?: T;
  paymentStatus?: T;
  amountPaid?: T;
  platformCommission?: T;
  vendorEarning?: T;
  walletTransactionProcessed?: T;
  shipment?:
    | T
    | {
        shipment_id?: T;
        public_code?: T;
        integration_code?: T;
        status_id?: T;
        total_cost?: T;
        last_synced_at?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  description?: T;
  rating?: T;
  product?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wallets_select".
 */
export interface WalletsSelect<T extends boolean = true> {
  tenant?: T;
  availableBalance?: T;
  pendingBalance?: T;
  totalEarnings?: T;
  totalWithdrawn?: T;
  commissionRate?: T;
  holdPeriodDays?: T;
  paypalEmail?: T;
  bankDetails?:
    | T
    | {
        accountHolderName?: T;
        accountNumber?: T;
        bankName?: T;
        swiftCode?: T;
        iban?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payouts_select".
 */
export interface PayoutsSelect<T extends boolean = true> {
  wallet?: T;
  amount?: T;
  method?: T;
  status?: T;
  requestedAt?: T;
  processedAt?: T;
  paypalPayoutId?: T;
  paypalPayoutItemId?: T;
  recipientEmail?: T;
  bankDetails?:
    | T
    | {
        accountHolderName?: T;
        accountNumber?: T;
        bankName?: T;
        swiftCode?: T;
        iban?: T;
      };
  notes?: T;
  failureReason?: T;
  feeAmount?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wallet-transactions_select".
 */
export interface WalletTransactionsSelect<T extends boolean = true> {
  wallet?: T;
  type?: T;
  amount?: T;
  grossAmount?: T;
  commissionAmount?: T;
  description?: T;
  status?: T;
  relatedOrder?: T;
  relatedPayout?: T;
  paypalTransactionId?: T;
  availableAt?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}